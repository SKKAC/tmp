#include <ros/ros.h>
#include <sensor_msgs/LaserScan.h>
#include <sensor_msgs/PointCloud2.h>
#include <pcl/point_types.h>
#include <pcl/conversions.h>
#include <pcl_ros/point_cloud.h>
#include <pcl_ros/transforms.h>

class LaserScanFilter
{
public:
    LaserScanFilter()
    {
        // Initialize ROS node
        ros::NodeHandle nh;

        // Subscribe to the LaserScan topic
        sub_ = nh.subscribe("/scan", 1, &LaserScanFilter::scanCallback, this);

        // Advertise the filtered PointCloud topic
        pub_ = nh.advertise<sensor_msgs::PointCloud2>("/filtered_points", 1);
    }

private:
    ros::Subscriber sub_;
    ros::Publisher pub_;

    void scanCallback(const sensor_msgs::LaserScan::ConstPtr& scan)
    {
        // Create a PointCloud object to store the filtered points
        pcl::PointCloud<pcl::PointXYZ> cloud;

        // Angle and distance thresholds
        const float min_angle = M_PI / 3;   // 60 degrees to the right
        const float max_angle = 2 * M_PI / 3; // 60 degrees to the left
        const float max_distance = 3.0;     // 3 meters

        // Iterate through the LaserScan ranges
        for (size_t i = 0; i < scan->ranges.size(); ++i)
        {
            float angle = scan->angle_min + i * scan->angle_increment;
            float range = scan->ranges[i];

            // Check if the point is within the desired angle and distance range
            if (angle > min_angle && angle < max_angle && range < max_distance)
            {
                // Convert polar coordinates to Cartesian coordinates
                pcl::PointXYZ point;
                point.x = range * cos(angle);
                point.y = range * sin(angle);
                point.z = 0.0;

                // Add the point to the cloud
                cloud.points.push_back(point);
            }
        }

        // Convert the PointCloud to a ROS message
        sensor_msgs::PointCloud2 output;
        pcl::toROSMsg(cloud, output);
        output.header = scan->header;

        // Publish the filtered points
        pub_.publish(output);
    }
};

int main(int argc, char** argv)
{
    // Initialize ROS
    ros::init(argc, argv, "laserscan_filter");

    // Create the LaserScanFilter object
    LaserScanFilter filter;

    // Spin to process callbacks
    ros::spin();

    return 0;
}
